import oracledb
from sentence_transformers import SentenceTransformer

# --- ORACLE CLIENT INIT ---
oracledb.init_oracle_client(lib_dir="instantclient_23_7")

# --- CONFIGURATION ---
DB_USER = ""
DB_PASSWORD = ""
DB_DSN = "localhost:1521/freepdb1"

EMBEDDING_MODEL_NAME = "all-MiniLM-L6-v2"
TABLE_NAME = "TEXT_EMBEDDINGS"

texts = [
    "Oracle 23ai database supports native vector search.",
    "Embeddings are dense representations of text.",
    "Python is a versatile programming language.",
]

def connect_to_oracle():
    connection = oracledb.connect(
        user=DB_USER, password=DB_PASSWORD, dsn=DB_DSN, mode=oracledb.SYSDBA
    )
    return connection


def setup_table(connection):
    cursor = connection.cursor()
    try:
        cursor.execute(
            f"""
            BEGIN
                EXECUTE IMMEDIATE 'DROP TABLE {TABLE_NAME}';
            EXCEPTION
                WHEN OTHERS THEN
                    IF SQLCODE != -942 THEN
                        RAISE;
                    END IF;
            END;
        """
        )
        connection.commit()
    except Exception as e:
        print(f"Drop table warning: {e}")

    cursor.execute(
        f"""
        CREATE TABLE {TABLE_NAME} (
            id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
            original_text CLOB,
            embedding VECTOR(384),
            PRIMARY KEY (id)
        )
    """
    )
    connection.commit()
    cursor.close()
    print(f"Table {TABLE_NAME} created successfully.")


def insert_embeddings(connection, texts, embeddings):
    cursor = connection.cursor()
    for text, vector in zip(texts, embeddings):
        if len(vector) != 384:
            raise ValueError(f"Vector has {len(vector)} dimensions instead of 384!")

        # Convert the vector to a comma-separated string
        vector_str = ",".join(f"{v:.6f}" for v in vector)

        # Call the stored procedure
        cursor.callproc("insert_text_embedding", [text, vector_str])

    connection.commit()
    cursor.close()
    print(f"Inserted {len(texts)} rows.")


def main():
    print("Loading model...")
    model = SentenceTransformer(EMBEDDING_MODEL_NAME)

    print("Generating embeddings...")
    embeddings = model.encode(texts)

    print("Connecting to Oracle...")
    conn = connect_to_oracle()

    setup_table(conn)
    print(f"Embedding shape: {embeddings.shape}")
    print(f"First vector length: {len(embeddings[0])}")
    insert_embeddings(conn, texts, embeddings)

    conn.close()
    print("Done successfully!")


if __name__ == "__main__":
    main()

